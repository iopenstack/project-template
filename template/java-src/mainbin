#!/bin/bash
#
# %copyright%


follow_one() {
  # Resolve symlinks and relative path components along a path.  This requires
  # its argument to be an absolute path.  This does not recursively re-resolve
  # symlinks; if that is required, use the 'follow' method.

  target=$1
  OIFS=$IFS
  IFS='/'

  # Taking each dir component along the way, build up a new target directory,
  # resolving '.', '..', and symlinks.
  newtarget=''
  for part in ${target}; do
    if [ -z "${part}" ]; then
      continue # Empty dir part. 'foo//bar'
    elif [ "." == "${part}" ]; then
      continue # Nothing special to do for '.'
    elif  [ ".." == "${part}" ]; then
      IFS=$OIFS
      newtarget=`dirname ${newtarget}` # pop a component.
    elif [ -h "${newtarget}/${part}" ]; then
      IFS=$OIFS
      link=`readlink ${newtarget}/${part}`
      # links can be relative or absolute. Relative ones get appended to
      # newtarget; absolute ones replace it.
      if [ "${link:0:1}" != "/"  ]; then
        newtarget="${newtarget}/${link}" # relative
      else
        newtarget="${link}" # absolute
      fi
    else # Regular file component.
      newtarget="${newtarget}/${part}"
    fi
    IFS='/'
  done

  IFS=$OIFS
  echo $newtarget
}

follow() {
  # Portable 'readlink -f' function to follow a file's links to the final
  # target.  Calls follow_one recursively til we're finished tracing symlinks.

  target=$1
  depth=$2

  if [ -z "$depth" ]; then
    depth=0
  elif [ "$depth" == "1000" ]; then
    # Don't recurse indefinitely; we've probably hit a symlink cycle.
    # Just bail out here.
    echo $target
    return 1
  fi

  # Canonicalize the target to be an absolute path.
  targetdir=`dirname ${target}`
  targetdir=`cd ${targetdir} && pwd`
  target=${targetdir}/`basename ${target}`

  # Use follow_one to resolve links. Test that we get the same result twice,
  # to terminate iteration.
  first=`follow_one ${target}`
  second=`follow_one ${first}`
  if [ "${first}" == "${second}" ]; then
    # We're done.
    echo "${second}"
  else
    # Need to continue resolving links.
    echo `follow ${second} $(( $depth + 1 ))`
  fi
}

prgm=`follow $0`
bin=`dirname ${prgm}`
bin=`cd ${bin} && pwd`

if [ -z "$%PROJNAME%_HOME" ]; then
  export %PROJNAME%_HOME=${bin}/..
fi


# Where to find the main %ProjName% jar
%PROJNAME%_JAR_DIR=$%PROJNAME%_HOME

# If there's a "build" subdir, override with this, so we use
# the newly-compiled copy.
if [ -d "$%PROJNAME%_JAR_DIR/build" ]; then
  %PROJNAME%_JAR_DIR="${%PROJNAME%_JAR_DIR}/build"
fi

function add_to_classpath() {
  dir=$1
  for f in $dir/*.jar; do
    %PROJNAME%_CLASSPATH=${%PROJNAME%_CLASSPATH}:$f;
  done

  export %PROJNAME%_CLASSPATH
}

# Add %ProjName% dependencies to classpath.
%PROJNAME%_CLASSPATH=""
if [ -d "$%PROJNAME%_HOME/lib" ]; then
  add_to_classpath $%PROJNAME%_HOME/lib
fi

%PROJNAME%_CONF_DIR=${%PROJNAME%_CONF_DIR:-${%PROJNAME%_HOME}/conf}
%PROJNAME%_CLASSPATH=${%PROJNAME%_CONF_DIR}:${%PROJNAME%_CLASSPATH}

# If there's a build subdir, use Ivy-retrieved dependencies too.
if [ -d "$%PROJNAME%_HOME/build/ivy/lib/%proj.name%" ]; then
  for f in $%PROJNAME%_HOME/build/ivy/lib/%proj.name%/*/*.jar; do
    %PROJNAME%_CLASSPATH=${%PROJNAME%_CLASSPATH}:$f;
  done
fi

add_to_classpath ${%PROJNAME%_JAR_DIR}

export %PROJNAME%_CLASSPATH
export %PROJNAME%_JAR_DIR

exec java ${JAVA_OPTS} -classpath "$%PROJNAME%_CLASSPATH} \
    %main.package%.%ProjName% "$@"

